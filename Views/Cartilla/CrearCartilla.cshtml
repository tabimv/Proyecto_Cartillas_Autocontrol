@model Proyecto_Cartilla_Autocontrol.Models.ViewModels.CartillasViewModel
@{
    ViewBag.Title = "Crear Cartilla";
    Func<string, string> TruncateActivityName = (name) =>
    {
        if (name.Length > 80)
        {
            return name.Substring(0, 80) + "..."; // Truncar y agregar puntos suspensivos si es necesario
        }
        return name;
    };
}
@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Administrador")
{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
else
{
    Layout = "~/Views/Shared/_LayoutGeneral.cshtml";
}
@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Administrador")
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/css/CRUD_create_edit.css">
    <link rel="stylesheet" href="~/Content/css/items.css">
    <link rel="stylesheet" href="~/Content/css/loading.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    using (Html.BeginForm("CrearCartilla", "Cartilla", FormMethod.Post))
    {
        <!-- Agregar al final de la vista -->
        <div style="position: fixed; right: 20px; bottom: 20px; text-align: center;" class="scroll-down-button">
            <a href="#" id="scrollDownLink" style="display: inline-block; text-decoration: none; padding: 10px; background-color: #585858; color: #fff; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); transition: background-color 0.3s, box-shadow 0.3s;"
               onmouseover="this.style.backgroundColor='#474747'; this.style.boxShadow='0px 0px 15px rgba(0, 0, 0, 0.3)';"
               onmouseout="this.style.backgroundColor='#585858'; this.style.boxShadow='0px 0px 10px rgba(0, 0, 0, 0.2)';">
                <i style="color: #F67122; font-size: 30px;" class="fa-solid fa-circle-down"></i>
                Bajar
            </a>
        </div>
        <div class="container-formularios">
            <div class="form-container">
                <h2>Crear Cartilla Autocontrol</h2>
                <form>
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        @Html.LabelFor(model => model.Cartilla.OBRA_obra_id, "Obra Asociada: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @if (Model.ObraList != null && Model.ObraList.Any())
                                {
                                    @Html.DropDownListFor(model => model.Cartilla.OBRA_obra_id, new SelectList(Model.ObraList, "obra_id", "nombre_obra"), "Seleccione una Obra", new { @class = "form-control", id = "Cartilla_OBRA_obra_id", style = "width: 120%;", required = "required", title = "Por favor, seleccione una obra" })
                                }
                                else
                                {
                                    <p>No hay obras disponibles para crear una cartilla de autocontrol.</p>
                                }

                                @Html.ValidationMessageFor(model => model.Cartilla.OBRA_obra_id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Cartilla.ACTIVIDAD_actividad_id, "Actividad Asociada: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @if (Model.ActividadesList != null && Model.ActividadesList.Any())
                                {
                                    @Html.DropDownListFor(model => model.Cartilla.ACTIVIDAD_actividad_id,
                                                              new SelectList(Model.ActividadesList.Select(a => new
                                                              {
                                                                  actividad_id = a.actividad_id,
                                                                  nombre_actividad = TruncateActivityName(a.nombre_actividad) // Aplicar truncamiento aquí
                                                              }), "actividad_id", "nombre_actividad"),
                                                              "Seleccione una actividad",
                                                              new { @class = "form-control", id = "Cartilla_ACTIVIDAD_actividad_id", style = "width: 120%;", required = "required", title = "Por favor, seleccione una actividad" })
                                }
                                else
                                {
                                    <p>No hay actividades disponibles para crear una cartilla de autocontrol.</p>
                                }
                                @Html.ValidationMessageFor(model => model.Cartilla.ACTIVIDAD_actividad_id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, "Estado Final Cartilla", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @if (Model.EstadoFinalList != null)
                                {
                                    var enProceso = Model.EstadoFinalList.FirstOrDefault(e => e.descripcion == "En proceso");
                                    if (enProceso != null)
                                    {
                                        @Html.DropDownListFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id,
                                                                new SelectList(new List<SelectListItem>
                                                                {
                             new SelectListItem { Value = enProceso.estado_final_id.ToString(), Text = enProceso.descripcion }
                }, "Value", "Text"),
                                                                new { @class = "form-control", style = "width: 120%;", disabled = "disabled" })
                                        @Html.HiddenFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, new { Value = enProceso.estado_final_id })
                                    }
                                    else
                                    {
                                        <p>No hay estado "En proceso" disponible.</p>
                                    }
                                }

                                @Html.ValidationMessageFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <!-- Tabla para mostrar los campos -->
                    <table id="detalleTable" style="display: none;">
                        <thead>
                            <tr>
                                <th style="width: 100%;">Item Verificación</th>
                                <th id="vbSupv">VB SUPV</th>
                                <th id="vbAC">VB AC</th>
                                <th if="vbfto">VB F.T.O</th>
                                <th>Inmueble ID</th>
                            </tr>
                        </thead>
                        <tbody id="contenedorRegistros">
                            @for (int i = 0; i < Model.DetalleCartillas.Count; i++)
                            {
                                <tr class="detalle-cartilla">
                                    @Html.HiddenFor(model => model.DetalleCartillas[i].CARTILLA_cartilla_id)
                                    @Html.HiddenFor(model => model.DetalleCartillas[i].detalle_cartilla_id)
                                    <td>
                                        @Html.DropDownListFor(model => model.DetalleCartillas[i].ITEM_VERIF_item_verif_id, new SelectList(Model.ElementosVerificacion, "item_verif_id", "elemento_verificacion"), "Seleccione una actividad", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.DetalleCartillas[i].ITEM_VERIF_item_verif_id, "", new { @class = "text-danger" })
                                    </td>
                                    <td>
                                        <input type="checkbox" disabled="disabled" @(Model.DetalleCartillas[i].estado_supv.HasValue && Model.DetalleCartillas[i].estado_supv.Value ? "checked='checked'" : "") />
                                    </td>
                                    <td>
                                        <input type="checkbox" disabled="disabled" @(Model.DetalleCartillas[i].estado_autocontrol.HasValue && Model.DetalleCartillas[i].estado_autocontrol.Value ? "checked='checked'" : "") />
                                    </td>
                                    <td>
                                        <input type="checkbox" disabled="disabled" @(Model.DetalleCartillas[i].estado_ito.HasValue && Model.DetalleCartillas[i].estado_ito.Value ? "checked='checked'" : "") />
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(model => model.DetalleCartillas[i].INMUEBLE_inmueble_id, new SelectList(Model.InmuebleList, "inmueble_id", "codigo_inmueble"), "ID", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.DetalleCartillas[i].INMUEBLE_inmueble_id, "", new { @class = "text-danger" })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div style=" margin-top: 20px;" class="form-group">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <input style="width: 100%;" type="submit" value="Crear" id="submitButton" class="btn btn-primary-custom" @(Model.ObraList == null || !Model.ObraList.Any() || Model.ActividadesList == null || !Model.ActividadesList.Any() ? "disabled" : "") />
                    </div>

                    <div>
                        <a href="@Url.Action("Index")" style="padding: 10px; width: 100%;" class="btn-custom">Volver a la lista</a>
                    </div>
                </form>
            </div>
        </div>
    }
    <div id="loadingOverlay"></div> <!-- Fondo semi transparente -->
    <div id="loadingSpinner" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
        <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>
        <span class="sr-only">Cargando...</span>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
    $(document).ready(function () {
        // Mostrar overlay y spinner cuando se envía el formulario
        $('form').submit(function () {
            $('#loadingOverlay').show();
            $('#loadingSpinner').show();
        });

        // Función debounce para limitar la frecuencia de las llamadas a la API
        function debounce(func, wait) {
            let timeout;
            return function() {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, arguments), wait);
            };
        }

        // Manejar cambios en el selector de obra
        $('#Cartilla_OBRA_obra_id').change(debounce(function () {
            const selectedObraId = $(this).val();
            cargarActividades(selectedObraId);
        }, 300));

        // Manejar cambios en el selector de actividad
        $('#Cartilla_ACTIVIDAD_actividad_id').change(function () {
            const selectedActividadId = $(this).val();
            obtenerCombinacionesElementosInmuebles(selectedActividadId);
        });

        // Función para cargar actividades
        function cargarActividades(obraId) {
            $('#loadingOverlay').show();
            $('#loadingSpinner').show();

            $.ajax({
                url: '@Url.Action("GetActividadByObra", "Cartilla")',
                type: 'GET',
                data: { obraId: obraId },
                success: function (data) {
                    let opciones = data.map(item =>
                        $('<option>', { value: item.actividadId, text: item.nombreActividad })
                    );
                    $('#Cartilla_ACTIVIDAD_actividad_id').empty().append(opciones);
                    if (data.length > 0) {
                        obtenerCombinacionesElementosInmuebles(data[0].actividadId); // Obtener inmuebles para la primera actividad
                    }
                },
                error: function () {
                    console.error('Error al obtener las actividades asociadas a la obra');
                },
                complete: function () {
                    $('#loadingOverlay').hide();
                    $('#loadingSpinner').hide();
                }
            });
        }

        // Función para obtener combinaciones de elementos e inmuebles
        function obtenerCombinacionesElementosInmuebles(actividadId) {
            $('#loadingOverlay').show();
            $('#loadingSpinner').show();

            $.ajax({
                url: '@Url.Action("GetCombinacionesElementosInmuebles", "Cartilla")',
                type: 'GET',
                data: { actividadId: actividadId },
                success: function (data) {
                    let filas = data.map((item, index) =>
                        `<tr class='detalle-cartilla'>
                            <td><input type='hidden' name='DetalleCartillas[${index}].ITEM_VERIF_item_verif_id' value='${item.item_verif_id}'>${item.elemento_verificacion}</td>
                            <td><input type='hidden' name='DetalleCartillas[${index}].estado_supv' value='false' /><input type='checkbox' name='DetalleCartillas[${index}].estado_supv' /></td>
                            <td><input type='hidden' name='DetalleCartillas[${index}].estado_autocontrol' value='false' /><input type='checkbox' name='DetalleCartillas[${index}].estado_autocontrol' /></td>
                            <td><input type='hidden' name='DetalleCartillas[${index}].estado_ito' value='false' /><input type='checkbox' name='DetalleCartillas[${index}].estado_ito' /></td>
                            <td><input type='hidden' name='DetalleCartillas[${index}].INMUEBLE_inmueble_id' value='${item.inmueble_id}'>${item.codigo_inmueble}</td>
                        </tr>`
                    ).join('');
                    $('#contenedorRegistros').html(filas);
                    $('#detalleTableContainer').show();
                },
                error: function () {
                    console.error('Error al obtener las combinaciones');
                },
                complete: function () {
                    $('#loadingOverlay').hide();
                    $('#loadingSpinner').hide();
                }
            });
        }
    });
    </script>
    <script>
        // Script para manejar la expiración de la sesión
        setTimeout(function () {
            window.location.href = '@Url.Action("Login", "Account")';
        }, 43200000); // 12 horas en milisegundos
    </script>
}
else
{
    <link rel="stylesheet" href="~/Content/css/AccesoDenegado.css">
    <div id="header">
        <h1> Acceso denegado. Esta vista solo está disponible para Administrador</h1>
        <br />
        <a href="@Url.Action("Login", "Account")" class="btn-acceso">Iniciar Sesión</a>
    </div>
}