@model Proyecto_Cartilla_Autocontrol.Models.ViewModels.CartillasViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Formulario para la CARTILLA -->
@using (Html.BeginForm("CrearCartilla", "Cartilla", FormMethod.Post))
{
    @Html.ValidationSummary(true)

    <!-- Campos para la CARTILLA -->
    <div class="form-group">
        @Html.LabelFor(model => model.Cartilla.fecha, "Fecha Cartilla Autocontrol:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.Cartilla.fecha, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                @Html.ValidationMessageFor(model => model.Cartilla.fecha, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Cartilla.ACTIVIDAD_actividad_id, "Actividad Asociada: ", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.DropDownListFor(model => model.Cartilla.ACTIVIDAD_actividad_id, new SelectList(Model.ActividadesList, "actividad_id", "nombre_actividad"), "Seleccione una actividad", new { @class = "form-control", id = "Cartilla_ACTIVIDAD_actividad_id" })
                @Html.ValidationMessageFor(model => model.Cartilla.ACTIVIDAD_actividad_id, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Cartilla.OBRA_obra_id, "Obra Asociada: ", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.Cartilla.OBRA_obra_id, new { htmlAttributes = new { @class = "form-control", id = "Cartilla_OBRA_obra_id" } })
                @Html.ValidationMessageFor(model => model.Cartilla.OBRA_obra_id, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>




    <div class="form-group">
        @Html.LabelFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, "Estado Final Cartilla", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.DropDownListFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, new SelectList(Model.EstadoFinalList, "estado_final_id", "descripcion"), "Seleccione un Estado de Cartilla", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Cartilla.ESTADO_FINAL_estado_final_id, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <table id="detalleTable">
        <tr>
            <th>Item Verif ID</th>
            <th>Estado OTEC</th>
            <th>Estado ITO</th>
            <th>Inmueble ID</th>
            <th>Acciones</th>
        </tr>
        @for (int i = 0; i < Model.DetalleCartillas.Count; i++)
        {
            <tr class="detalle-cartilla">
                @Html.HiddenFor(model => model.DetalleCartillas[i].CARTILLA_cartilla_id)
                @Html.HiddenFor(model => model.DetalleCartillas[i].detalle_cartilla_id)


                <td>
                    @Html.DropDownListFor(model => model.DetalleCartillas[i].ITEM_VERIF_item_verif_id, new SelectList(Model.ElementosVerificacion, "item_verif_id", "elemento_verificacion"), "Seleccione una actividad", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DetalleCartillas[i].ITEM_VERIF_item_verif_id, "", new { @class = "text-danger" })
                </td>

                <td> @Html.CheckBoxFor(model => model.DetalleCartillas[i].estado_otec, new { @disabled = "disabled" })  </td>
                <td> @Html.CheckBoxFor(model => model.DetalleCartillas[i].estado_ito, new { @disabled = "disabled" })  </td>
                <td>
                    @Html.DropDownListFor(model => model.DetalleCartillas[i].INMUEBLE_inmueble_id, new SelectList(Model.InmuebleList, "inmueble_id", "inmueble_id"), "Seleccione un inmueble", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DetalleCartillas[i].INMUEBLE_inmueble_id, "", new { @class = "text-danger" })
                </td>
                <td><button type="button" class="eliminarRegistro">Eliminar</button></td>
            </tr>
        }
    </table>



    <button type="button" id="agregarRegistro">Agregar más registros</button>
    <input type="submit" value="Guardar" />

}

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
$(document).ready(function () {
    $('#Cartilla_ACTIVIDAD_actividad_id').change(function () {
        var selectedActividadId = $(this).val();

        // Realizar petición AJAX para obtener las combinaciones de elementos de verificación e inmuebles
        $.ajax({
            url: '@Url.Action("GetCombinacionesElementosInmuebles", "Cartilla")',
            type: 'GET',
            data: { actividadId: selectedActividadId },
            success: function (data) {
                // Verificar si hay elementos de verificación para la actividad seleccionada
                if (data.length === 0) {
                    // No hay elementos de verificación, por lo que se mostrará solo una fila vacía
                    $(".detalle-cartilla").hide();
                    $(".detalle-cartilla:first").show().find("select").val('');
                } else {
                    // Obtener la cantidad de combinaciones de elementos de verificación e inmuebles
                    var cantidadCombinaciones = data.length;

                    // Obtener la cantidad actual de filas en la tabla
                    var cantidadFilasActuales = $(".detalle-cartilla").length;

                    // Si la cantidad de filas actuales es menor a la cantidad de combinaciones,
                    // agregar nuevas filas hasta alcanzar la cantidad necesaria
                    if (cantidadFilasActuales < cantidadCombinaciones) {
                        var filasAAgregar = cantidadCombinaciones - cantidadFilasActuales;
                        for (var i = 0; i < filasAAgregar; i++) {
                            var nuevaFila = $(".detalle-cartilla:first").clone();
                            $("#detalleTable").append(nuevaFila);
                        }
                    }

                    if (data.length > 0) {
                        for (var i = 0; i < data.length; i++) {
                            var newRow = $("<tr class='detalle-cartilla'>" +
                                "<td><select name='DetalleCartillas[" + i + "].ITEM_VERIF_item_verif_id' class='form-control'></select></td>" +
                                "<td><select name='DetalleCartillas[" + i + "].INMUEBLE_inmueble_id' class='form-control'></select></td>" +
                                "<td><button type='button' class='eliminarRegistro'>Eliminar</button></td>" +
                                "</tr>");

                            newRow.find("select[name$='.ITEM_VERIF_item_verif_id']").append("<option value='" + data[i].item_verif_id + "'>" + data[i].elemento_verificacion + "</option>");
                            newRow.find("select[name$='.INMUEBLE_inmueble_id']").append("<option value='" + data[i].inmueble_id + "'>" + data[i].tipo_inmueble + "</option>");

                            newRow.appendTo("#detalleTable");
                        }
                    }

                    // Mostrar solo la cantidad necesaria de filas basadas en las combinaciones de elementos de verificación e inmuebles
                    $(".detalle-cartilla").hide();
                    for (var i = 0; i < cantidadCombinaciones; i++) {
                        $(".detalle-cartilla").eq(i).show();
                        var elementoVerificacionId = data[i].item_verif_id;
                        var inmuebleId = data[i].inmueble_id;

                        $(".detalle-cartilla").eq(i).find("select[name^='DetalleCartillas'][name$='.ITEM_VERIF_item_verif_id']").val(elementoVerificacionId);
                        $(".detalle-cartilla").eq(i).find("select[name^='DetalleCartillas'][name$='.INMUEBLE_inmueble_id']").val(inmuebleId);
                    }
                }
            },
            error: function () {
                console.error('Error al obtener combinaciones de elementos e inmuebles');
            }
        });
    });

    // Manejar clic en el botón eliminar
    $("#detalleTable").on("click", ".eliminarRegistro", function () {
        $(this).closest("tr").hide(); // Ocultar la fila en lugar de eliminarla
    });
});
</script>
<script>
    $(document).ready(function () {
        $('#Cartilla_ACTIVIDAD_actividad_id').change(function () {
            var selectedActividadId = $(this).val();

            // Realizar petición AJAX para obtener la obra asociada
            $.ajax({
                url: '@Url.Action("GetObraByActividadId", "Cartilla")', // Reemplaza con la URL de tu endpoint para la obra
                type: 'GET',
                data: { actividadId: selectedActividadId },
                success: function (data) {
                    // Actualizar el campo de obra con la respuesta del servidor
                    $('#Cartilla_OBRA_obra_id').val(data.obraId); // Reemplaza 'data.obraId' con el nombre del campo devuelto por tu endpoint
                },
                error: function () {
                    // Manejar errores si la petición falla
                    console.error('Error al obtener la obra');
                }
            });

            $('.detalle-cartilla').each(function (i) {
                var detalleCartilla = $(this);
                var elementoVerifDropdown = detalleCartilla.find('[name="DetalleCartillas[' + i + '].ITEM_VERIF_item_verif_id"]');

                // Realizar petición AJAX para obtener los elementos de verificación asociados a la actividad seleccionada
                $.ajax({
                    url: '@Url.Action("GetElementosVerificacionByActividad", "Cartilla")',
                    type: 'GET',
                    data: { actividadId: selectedActividadId },
                    success: function (data) {
                        // Limpiar y volver a llenar el dropdownlist de elementos de verificación con las opciones obtenidas
                        elementoVerifDropdown.empty(); // Limpiar el dropdownlist

                        // Llenar el dropdownlist con los nuevos elementos de verificación
                        $.each(data, function (index, item) {
                            elementoVerifDropdown.append($('<option></option>').val(item.value).text(item.text));
                        });
                    },
                    error: function () {
                        console.error('Error al obtener elementos de verificación por actividad');
                    }
                });
        });
        });
    });
</script>
<script>
$(document).ready(function () {
    function obtenerInmueblesPorActividad(actividadId) {
        // Realizar petición AJAX para obtener la obra asociada a la actividad seleccionada
        $.ajax({
            url: '@Url.Action("GetObraByActividadId", "Cartilla")',
            type: 'GET',
            data: { actividadId: actividadId },
            success: function (data) {
                var obraId = data.obraId;
                // Llamar a la función para obtener los inmuebles por obra
                obtenerInmueblesPorObra(obraId);
            },
            error: function () {
                console.error('Error al obtener la obra por actividad');
            }
        });
    }

    function obtenerInmueblesPorObra(obraId) {
        // Llamar a la función para obtener los inmuebles por obra
        $.ajax({
            url: '@Url.Action("GetInmuebleByObra", "Cartilla")',
            type: 'GET',
            data: { obraID: obraId },
            success: function (data) {
                // Actualizar dropdown de inmuebles en la tabla de detalle
                $('.detalle-cartilla').each(function (i) {
                    var detalleCartilla = $(this);
                    var elementoInmuebleDropdown = detalleCartilla.find('[name="DetalleCartillas[' + i + '].INMUEBLE_inmueble_id"]');
                    elementoInmuebleDropdown.empty();
                    $.each(data, function (index, item) {
                        elementoInmuebleDropdown.append($('<option></option>').val(item.value).text(item.text));
                    });
                });
            },
            error: function () {
                console.error('Error al obtener los Inmuebles por Obra');
            }
        });
    }

    // Evento change para la actividad
    $('#Cartilla_ACTIVIDAD_actividad_id').change(function () {
        var selectedActividadId = $(this).val();
        obtenerInmueblesPorActividad(selectedActividadId);
    });
});

</script>

