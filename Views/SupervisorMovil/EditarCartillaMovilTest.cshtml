@model Proyecto_Cartilla_Autocontrol.Models.ViewModels.CartillaMovilViewModel

@{
    ViewBag.Title = "Editar Cartilla";
    var usuarioActualRut = ViewBag.RutUsuarioAutenticado as string;

}

@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Supervisor")
{
    Layout = "~/Views/Shared/_Layout_Supv.cshtml";
}
else
{
    Layout = "~/Views/Shared/_LayoutGeneral.cshtml";
}

@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Supervisor")
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/css/CRUD_create_edit_movil.css">
    <link rel="stylesheet" href="~/Content/css/loading.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />


    <!-- Fondo semitransparente -->
    <div id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9998;"></div>

    <!-- Spinner de carga -->
    <div id="loadingSpinner" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
        <i class="fa fa-spinner fa-spin fa-3x fa-fw" style="color: #fff;"></i>
        <span class="sr-only">Cargando...</span>
    </div>
    <script>
        $(document).ready(function () {
            // Detectar el evento de envío del formulario
            $('#cartillaForm').on('submit', function (e) {
                // Mostrar el overlay y el spinner de carga
                $('#loadingOverlay').show();
                $('#loadingSpinner').show();

                // Desactivar el botón de envío para evitar envíos múltiples
                $('#submitButton').prop('disabled', true);
            });
        });
    </script>
    using (Html.BeginForm("EditarCartillaMovilTest", "SupervisorMovil", FormMethod.Post, new { id = "cartillaForm" }))
    {
        <div class="container-formularios">
            <div class="form-container">
                <h2>Editar Cartilla Autocontrol</h2>

                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Cartilla.cartilla_id, new { id = "cartillaIdField" })



                <div class="form-group">
                    <label for="cartilla_id"><strong>Cartilla de Autocontrol</strong></label>
                    @Html.DropDownListFor(model => model.Cartilla.cartilla_id, ViewBag.CARTILLA_id as SelectList, "Seleccione una Cartilla", new { @class = "form-control", id = "cartilla_id", style = "width: 100%;" })
                </div>

                <div id="detallesCartillaContainer" style="display: none;">
                    <div class="form-group">
                        <p>
                            <strong> Obra:  </strong>
                            <span id="obra">@Html.DisplayFor(model => model.Cartilla.OBRA.nombre_obra)</span>
                        </p>

                        <p>
                            <strong> Fecha de emisión:  </strong>
                            <span id="fechaEmision">@Html.DisplayFor(model => model.Cartilla.fecha)</span>
                        </p>

                        <p>
                            <strong> Estado Final:  </strong>
                            <span id="estado">@Html.DisplayFor(model => model.Cartilla.ESTADO_FINAL.descripcion)</span>
                        </p>
                    </div>
                </div>


                <div class="form-group" id="observacionesContainer" style="display: none;">
                    <label for="observacionesField"><strong>Observaciones Públicas: </strong></label>
                    @Html.TextAreaFor(model => model.Cartilla.observaciones, new { @id = "observacionesField", @class = "form-control" })
                </div>

                <div class="form-group" id="observacionesprivContainer" style="display: none;">
                    <label for="observacionesprivField"><strong>Observaciones Privadas: </strong></label>
                    @Html.TextAreaFor(model => model.Cartilla.observaciones_priv, new { @id = "observacionesprivField", @class = "form-control" })
                </div>


                <div class="form-group" id="loteDropdown" style="display: none;">
                    <!-- Ocultar inicialmente -->
                    <label for="lote_id"><strong>Lote de Inmueble</strong></label>
                    @Html.DropDownList("lote_id", ViewBag.LOTES as SelectList, "Seleccione un Lote", new { @class = "form-control full-width", id = "lote_id", style = "width: 100%;" })
                </div>

                <div class="form-group" id="inmuebleDropdown" style="display: none;">
                    <!-- Ocultar inicialmente -->
                    <label for="inmueble_id"><strong>Inmueble</strong></label>
                    @Html.DropDownList("inmueble_id", ViewBag.INMUEBLES as SelectList, "Seleccione un Inmueble", new { @class = "form-control full-width", id = "inmueble_id", style = "width: 100%;" })
                </div>


                <div class="form-group-rev" style="display: none;">
                    <label><strong>¿Es revisado por segunda vez?</strong></label>
                    <input type="checkbox" id="revisionDosCheckbox" disabled />
                </div>


                <table id="detalleTable" class="table">
                    <thead class="hidden">
                        <tr>
                            <th>Label</th>
                            <th>Item Verificación</th>
                            <th>
                                VB SUPV
                                @Html.CheckBox("selectAllSUPV", new { @class = "select-all", title = "Aprobar Todo", style = "vertical-align: middle;" })
                            </th>
                            <th>VB AC</th>
                            <th>VB F.T.O</th>
                        </tr>
                    </thead>
                    <tbody id="detalleTableBody" style="display: none;">
                        @for (int index = 0; index < Model.DetalleCartillas.Count; index++)
                        {


                            var detalle = Model.DetalleCartillas[index];

                            <tr class="detalle-cartilla"
                                data-cartilla-id="@detalle.CARTILLA_cartilla_id"
                                data-lote-id="@detalle.INMUEBLE.LOTE_INMUEBLE.lote_id"
                                data-inmueble-id="@detalle.INMUEBLE_inmueble_id">

                                <td>@detalle.ITEM_VERIF.label</td>
                                <td>@detalle.ITEM_VERIF.elemento_verificacion</td>

                                @if (Model.DetalleCartillas[index].estado_supv == null)
                                {
                                    <td class="column-supv editable">
                                        @Html.RadioButtonFor(model => model.DetalleCartillas[index].estado_supv, true, new { @id = $"DetalleCartillas_{index}__estado_supv_True", @class = "approval-checkbox" }) Sí
                                        <br />
                                        @Html.RadioButtonFor(model => model.DetalleCartillas[index].estado_supv, false, new { @id = $"DetalleCartillas_{index}__estado_supv_False", @class = "approval-checkbox" }) No
                                    </td>
                                }
                                else
                                {
                                    if (Model.DetalleCartillas[index].estado_supv == true)
                                    {
                                        <td class="column-supv-disabled">
                                            @{
                                                var rutSupv = Model.DetalleCartillas[index].rut_spv;
                                                var supervisorName = string.Empty;

                                                if (!string.IsNullOrEmpty(rutSupv) && ViewBag.SupervisorNames != null && ViewBag.SupervisorNames.ContainsKey(rutSupv))
                                                {
                                                    supervisorName = ViewBag.SupervisorNames[rutSupv];
                                                }
                                            }
                                            @Html.RadioButtonFor(model => model.DetalleCartillas[index].estado_supv, true,
                                          new { @disabled = "disabled", title = $"VB Supervisor: aprobado por {supervisorName}" })
                                            Si
                                        </td>
                                    }
                                    else if (Model.DetalleCartillas[index].estado_supv == false)
                                    {

                                        <td class="column-supv">
                                            @{
                                                var rutSupv = Model.DetalleCartillas[index].rut_spv;
                                                var supervisorName = string.Empty;

                                                if (!string.IsNullOrEmpty(rutSupv) && ViewBag.SupervisorNames != null && ViewBag.SupervisorNames.ContainsKey(rutSupv))
                                                {
                                                    supervisorName = ViewBag.SupervisorNames[rutSupv];
                                                }
                                            }

                                            @Html.RadioButtonFor(model => model.DetalleCartillas[index].estado_supv, true, new { @id = $"DetalleCartillas_{index}__estado_supv_True_EDITAR", @class = "approval-checkbox" }) Sí
                                            <br />
                                            @Html.RadioButtonFor(model => model.DetalleCartillas[index].estado_supv, false,
                                                                         new { @disabled = "disabled", title = $"VB Supervisor: rechazado por {supervisorName}" })
                                            No
                                        </td>
                                    }
                                }


                                <td>
                                    @if (Model.DetalleCartillas[index].estado_autocontrol != null)
                                    {
                                        if (Model.DetalleCartillas[index].estado_autocontrol == true)
                                        {
                                            <i style="color:green;" class="material-icons" data-toggle="tooltip" title="VB Autocontrol: Aprobado">&#xE876;</i>
                                            <span style="display: none;">Sí</span>
                                        }
                                        else if (Model.DetalleCartillas[index].estado_autocontrol == false)
                                        {
                                            <i style="color:maroon;" class="material-icons" data-toggle="tooltip" title="VB Autocontrol: Rechazado">&#xE5CD;</i>
                                            <span style="display: none;">No</span>
                                        }
                                    }
                                    else
                                    {
                                        <i style="font-size: 50px; border: 1px solid black; padding: 5px; text-align: center; margin-bottom: 5px;" class="material-icons" data-toggle="tooltip" title="Sin revisión"></i>
                                    }
                                </td>

                                <td>
                                    @if (Model.DetalleCartillas[index].estado_ito != null)
                                    {
                                        if (Model.DetalleCartillas[index].estado_ito == true)
                                        {
                                            <i style="color:green;" class="material-icons" data-toggle="tooltip" title="VB F.T.O: Aprobado">&#xE876;</i>
                                            <span style="display: none;">Sí</span>
                                        }
                                        else if (Model.DetalleCartillas[index].estado_ito == false)
                                        {
                                            <i style="color:maroon;" class="material-icons" data-toggle="tooltip" title="VB F.T.O: Rechazado">&#xE5CD;</i>
                                            <span style="display: none;">No</span>
                                        }
                                    }
                                    else
                                    {
                                        <i style="font-size: 50px; border: 1px solid black; padding: 5px; text-align: center; margin-bottom: 5px;" class="material-icons" data-toggle="tooltip" title="Sin revisión"></i>
                                    }
                                </td>


                                <!-- Campos ocultos con nombres únicos -->
                                <input type="hidden" name="DetalleCartillas[@index].detalle_cartilla_id" value="@detalle.detalle_cartilla_id" />
                                <input type="hidden" name="DetalleCartillas[@index].item_verif_id" value="@detalle.ITEM_VERIF_item_verif_id" />
                                <input type="hidden" name="DetalleCartillas[@index].inmueble_id" value="@detalle.INMUEBLE_inmueble_id" />
                                <input type="hidden" name="DetalleCartillas[@index].cartilla_id" value="@detalle.CARTILLA_cartilla_id" />
                                @Html.HiddenFor(model => model.DetalleCartillas[@index].ITEM_VERIF.tipo_item, new { @class = "tipo-item" })
                            </tr>
                        }

                    </tbody>
                </table>

                <div style=" margin-top: 20px;" class="form-group">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <input style="width: 100%;" id="submitButton" type="submit" value="Guardar Cambios" class="btn btn-primary-custom" disabled />

                </div>
                <div>
                    <a href="@Url.Action("Index", "VistaPerfilSupervisor")" class="btn-custom" style=" width: 100%; padding: 10px 10%; white-space: nowrap;">Volver a la lista</a>
                </div>


            </div>
        </div>
    }

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

    <script>
        $(document).ready(function () {

            // Inicializa Select2 en el dropdown de cartilla
            $('#cartilla_id').select2({
                placeholder: "Seleccione una Cartilla",
                allowClear: false,
                minimumResultsForSearch: Infinity // Desactivar búsqueda
            });

            $('#lote_id').select2({
                placeholder: "Seleccione un Lote",
                allowClear: false,
                minimumResultsForSearch: Infinity // Desactivar búsqueda
            });

            $('#inmueble_id').select2({
                placeholder: "Seleccione un Inmueble",
                allowClear: false,
                minimumResultsForSearch: Infinity // Desactivar búsqueda
            });


    $('#cartilla_id').change(function () {
        var cartillaId = $(this).val();

        // Actualiza el campo oculto con el valor seleccionado
        $('#cartillaIdField').val(cartillaId);

        // Mostrar el overlay y el spinner de carga al cambiar de cartilla
        $('#loadingOverlay').show();
        $('#loadingSpinner').show();

        // Si se selecciona la opción por defecto, oculta el contenedor de observaciones y el dropdown de inmuebles
        if (cartillaId === "") {
            $('#detallesCartillaContainer').hide();
            $('#observacionesContainer').hide(); // Oculta el contenedor de observaciones
            $('#observacionesprivContainer').hide(); // Oculta el contenedor de observaciones
            $('#loteDropdown').hide(); // Oculta el contenedor de lotes
            $('#inmuebleDropdown').hide(); // Oculta el contenedor de inmuebles
            $('#detalleTableBody').hide(); // Ocultar el cuerpo de la tabla
            $('#loadingOverlay').hide();
            $('#loadingSpinner').hide();
            // Reiniciar los selectores de lote y de inmueble
            // Restablecer valores de selectores al valor por defecto
            $('#lote_id').val("").trigger('change'); // Limpiar lote
            $('#inmueble_id').val("").trigger('change'); // Limpiar inmueble

            // Ocultar todas las filas del cuerpo de la tabla
            $('#detalleTableBody tr').hide();
        } else {
            // Hacer la llamada AJAX para obtener las observaciones
            $.ajax({
                url: '@Url.Action("ObtenerCamposPorCartilla", "SupervisorMovil")',
                type: 'GET',
                data: { cartillaId: cartillaId },
                success: function (response) {
                    // Llenar el campo de observaciones con los datos obtenidos
                    $('#observacionesField').val(response.observaciones);
                    $('#observacionesprivField').val(response.observaciones_priv);
                    $('#obra').text(response.nombre_obra); // Asigna el valor de la obra
                    var dateMilliseconds = parseInt(response.fecha.substr(6));
                    var date = new Date(dateMilliseconds);
                    var formattedDate = date.toLocaleDateString(); // Formatea la fecha según la configuración regional
                    $('#fechaEmision').text(formattedDate); // Asigna la fecha formateada
                    $('#estado').text(response.estado); // Asigna el valor de la obra
                    // Reiniciar el valor de inmueble si cambia la cartilla
                    $('#lote_id').val("").trigger('change'); // Limpiar lote
                    $('#inmueble_id').val("").trigger('change');
                    $('#inmuebleDropdown').hide(); // Oculta el contenedor de inmuebles

                    // Reiniciar las filas de detalle_cartilla (limpiar o reiniciar su estado)
                    $('#detalleTableBody tr').hide(); // Oculta todas las filas al cambiar cartilla_id
                },
                error: function () {
                    alert('Error al obtener las observaciones.');
                },
                 complete: function () {
                    // Ocultar el spinner cuando la solicitud termina (éxito o error)
                    $('#loadingOverlay').hide();
                    $('#loadingSpinner').hide();
                }
            });

            // Hacer la llamada AJAX para obtener los lotes
            $.ajax({
                url: '@Url.Action("ObtenerLotesPorCartilla", "SupervisorMovil")',
                type: 'GET',
                data: { cartillaId: cartillaId },
                success: function (data) {
                    var $loteDropdown = $('#lote_id');
                    $loteDropdown.empty(); // Limpiar el dropdown actual

                    // Agregar una opción por defecto
                    $loteDropdown.append('<option value="">Seleccione un Lote</option>');

                    // Agregar las nuevas opciones
                    $.each(data, function (index, lote) {
                        $loteDropdown.append('<option value="' + lote.lote_id + '">' + lote.abreviatura + '</option>');
                    });

                    // Mostrar el dropdown de lotes solo si hay lotes disponibles
                    if (data.length > 0) {
                        $('#loteDropdown').show(); // Mostrar el dropdown si hay lotes
                    } else {
                        $('#loteDropdown').hide(); // Ocultar si no hay lotes
                    }

                    // Reiniciar el valor de inmueble si cambia la cartilla
                    $('#inmueble_id').val("").trigger('change');
                },
                error: function () {
                    alert('Error al cargar los lotes.'); // Manejar el error de manera adecuada
                },
                complete: function () {
                    // Ocultar el spinner cuando la solicitud termina (éxito o error)
                    $('#loadingOverlay').hide();
                    $('#loadingSpinner').hide();
                }
            });
        }
    });

    $('#lote_id').change(function () {
        var loteId = $(this).val();
        var cartillaId = $('#cartilla_id').val(); // Obtener el valor actual de cartilla_id


        // Comprobar si no se ha seleccionado una cartilla válida
        if (cartillaId === "") {
            $('#inmuebleDropdown').hide(); // Oculta el contenedor de inmuebles si no hay cartilla seleccionada
            return; // Salir de la función para evitar la llamada AJAX
        }
        // Reiniciar el selector de inmueble si no hay lote seleccionado
        if (loteId === "") {
            $('#inmueble_id').val("").trigger('change');
            $('#inmuebleDropdown').hide(); // Oculta el contenedor de inmuebles si no hay lote seleccionado
            return;
        }

        // Mostrar el overlay y el spinner de carga al cambiar de lote
        $('#loadingOverlay').show();
        $('#loadingSpinner').show();

                // Hacer la llamada AJAX para obtener los inmuebles
                $.ajax({
                    url: '@Url.Action("ObtenerInmueblesPorLote", "SupervisorMovil")',
                    type: 'GET',
                    data: { loteId: loteId },
                    success: function (data) {
                        var $inmuebleDropdown = $('#inmueble_id'); // Asegúrate de tener un dropdown con este id
                        $inmuebleDropdown.empty(); // Limpiar el dropdown actual

                        // Agregar una opción por defecto
                        $inmuebleDropdown.append('<option value="">Seleccione un Inmueble</option>');

                        // Agregar las nuevas opciones
                        $.each(data, function (index, inmueble) {
                            $inmuebleDropdown.append('<option value="' + inmueble.inmueble_id + '">' + inmueble.codigo_inmueble + '</option>');
                        });

                        // Mostrar el dropdown de inmuebles solo si hay inmuebles disponibles
                        if (data.length > 0) {
                            $('#inmuebleDropdown').show(); // Mostrar el dropdown de inmuebles
                        } else {
                            $('#inmuebleDropdown').hide(); // Ocultar si no hay inmuebles
                        }
                    },
                    error: function () {
                        alert('Error al cargar los inmuebles.'); // Manejar el error de manera adecuada
                    },
                    complete: function () {
                        // Ocultar el spinner cuando la solicitud termina (éxito o error)
                        $('#loadingOverlay').hide();
                        $('#loadingSpinner').hide();
                    }
                });
            });
        });
    </script>
    <script>
        $('#cartilla_id').change(function () {
            // Obtener los valores seleccionados
            var cartillaVal = $('#cartilla_id').val();


            // Verificar si los tres tienen valores válidos seleccionados
            if (cartillaVal) {
                filtrarFilas(); // Ejecutar la función de filtrado solo si los tres tienen valor
                $('#detallesCartillaContainer').show();
                $('#observacionesContainer').show(); // Mostrar el contenedor de observaciones
                $('#observacionesprivContainer').show(); // Mostrar el contenedor de observaciones

            } else {
                $('#detallesCartillaContainer').hide();
                $('#observacionesContainer').hide(); // Ocultar el contenedor si falta alguna selección
                $('#observacionesprivContainer').hide(); // Ocultar el contenedor si falta alguna selección
            }
        });
        $('#cartilla_id, #lote_id, #inmueble_id').change(function () {
            // Obtener los valores seleccionados
            var cartillaVal = $('#cartilla_id').val();
            var loteVal = $('#lote_id').val();
            var inmuebleVal = $('#inmueble_id').val();

            // Verificar si los tres tienen valores válidos seleccionados
            if (cartillaVal && loteVal && inmuebleVal) {
                filtrarFilas(); // Ejecutar la función de filtrado solo si los tres tienen valor

                $('#detalleTable thead').removeClass('hidden');
                // Habilitar el botón de guardar cambios
                $('#submitButton').prop('disabled', false);
            } else {
                // Ocultar el <thead> de la tabla si falta alguna selección
                $('#detalleTable thead').addClass('hidden');
                // Habilitar el botón de guardar cambios
                $('#submitButton').prop('disabled', true);
            }
        });

        // Filtrar filas en la tabla
        function filtrarFilas() {
            var cartillaId = $('#cartillaIdField').val();
            var loteId = $('#lote_id').val();
            var inmuebleId = $('#inmueble_id').val();
            var hasVisibleRows = false;

            $('#detalleTableBody tr').each(function () {
                var rowCartillaId = $(this).data('cartilla-id');
                var rowLoteId = $(this).data('lote-id');
                var rowInmuebleId = $(this).data('inmueble-id');

                if (rowCartillaId == cartillaId && rowLoteId == loteId && rowInmuebleId == inmuebleId) {
                    $(this).show();
                    hasVisibleRows = true;
                } else {
                    $(this).hide();
                }
            });

            $('#detalleTableBody').toggle(hasVisibleRows);
        }
    </script>
    <script>
$(document).ready(function () {
    // Controlar el cambio de los filtros de cartilla, lote o inmueble
    $('#cartilla_id, #lote_id, #inmueble_id').change(function () {
        var cartillaId = $('#cartilla_id').val();
        var loteId = $('#lote_id').val();
        var inmuebleId = $('#inmueble_id').val();

        // Limpiar la casilla de verificación
        $('#revisionDosCheckbox').prop('checked', false);

        // Ocultar el div inicialmente
        $('.form-group-rev').hide();

        // Verificar si hay valores seleccionados
        if (cartillaId && loteId) {
            // Mostrar el div si ambos están seleccionados
            if (inmuebleId) {
                $('.form-group-rev').show();

                // Hacer una solicitud AJAX para obtener el valor de revisionDos desde la base de datos
                $.ajax({
                    url: '@Url.Action("ObtenerRevisionDos", "RevisionMovil")', // Acción en tu controlador
                    type: 'GET',
                    data: {
                        cartillaId: cartillaId,
                        loteId: loteId,
                        inmuebleId: inmuebleId
                    },
                    success: function (response) {
                        if (response.success) {
                            // Establecer el estado del checkbox basado en la respuesta
                            $('#revisionDosCheckbox').prop('checked', response.revisionDos);
                        } else {
                            // Manejo de error si es necesario
                        }
                    },
                    error: function () {
                        alert('Error al realizar la solicitud para obtener el estado de revisión.');
                    }
                });
            } else {
                // Si el inmueble no está seleccionado, ocultar el div
                $('.form-group-rev').hide();
            }
        } else {
            // Ocultar el div si no se seleccionan todos los valores
            $('.form-group-rev').hide();
        }
    });

    // Controlar el cambio de la casilla
    $('#revisionDosCheckbox').change(function () {
        var isChecked = $(this).is(':checked');

        // Actualizar los valores ocultos en las filas visibles cuando cambia la casilla
        $('#detalleTableBody tr:visible').each(function () {
            $(this).find('.revision-dos-hidden').val(isChecked);
        });
    });

    // Aquí puedes agregar lógica adicional si es necesario, o eliminar este bloque
    // para evitar el envío del formulario
});
    </script>
    <script>
$(document).ready(function () {
    // Controlar el cambio de los filtros de cartilla, lote o inmueble
    $('#cartilla_id, #lote_id, #inmueble_id').change(function () {
        var cartillaId = $('#cartilla_id').val();
        var loteId = $('#lote_id').val();
        var inmuebleId = $('#inmueble_id').val();

        // Limpiar la casilla de verificación
        $('#revisionDosCheckbox').prop('checked', false);

        // Ocultar el div inicialmente
        $('.form-group-rev').hide();

        // Verificar si hay valores seleccionados
        if (cartillaId && loteId) {
            // Mostrar el div si ambos están seleccionados
            if (inmuebleId) {
                $('.form-group-rev').show();

                // Hacer una solicitud AJAX para obtener el valor de revisionDos desde la base de datos
                $.ajax({
                    url: '@Url.Action("ObtenerRevisionDos", "RevisionMovil")', // Acción en tu controlador
                    type: 'GET',
                    data: {
                        cartillaId: cartillaId,
                        loteId: loteId,
                        inmuebleId: inmuebleId
                    },
                    success: function (response) {
                        if (response.success) {
                            // Establecer el estado del checkbox basado en la respuesta
                            $('#revisionDosCheckbox').prop('checked', response.revisionDos);
                        } else {
                            // Manejo de error si es necesario
                        }
                    },
                    error: function () {
                        alert('Error al realizar la solicitud para obtener el estado de revisión.');
                    }
                });
            } else {
                // Si el inmueble no está seleccionado, ocultar el div
                $('.form-group-rev').hide();
            }
        } else {
            // Ocultar el div si no se seleccionan todos los valores
            $('.form-group-rev').hide();
        }
    });

    // Controlar el cambio de la casilla
    $('#revisionDosCheckbox').change(function () {
        var isChecked = $(this).is(':checked');

        // Actualizar los valores ocultos en las filas visibles cuando cambia la casilla
        $('#detalleTableBody tr:visible').each(function () {
            $(this).find('.revision-dos-hidden').val(isChecked);
        });
    });

    // Aquí puedes agregar lógica adicional si es necesario, o eliminar este bloque
    // para evitar el envío del formulario
});
    </script>

    <script>
        $(document).ready(function () {
            // Función para verificar y deshabilitar o habilitar el detalle-cartilla con tipo_item = true
            function verificarEstadoSupervisor() {
                var loteId = $('#lote_id').val();
                var inmuebleId = $('#inmueble_id').val();
                var cartillaId = $('#cartillaIdField').val();

                var todosTipoItemFalseTrue = true;

                // Buscar todos los detalle-cartilla que tienen tipo_item = false y verificar su estado_supv
                $('.detalle-cartilla[data-cartilla-id="' + cartillaId + '"][data-lote-id="' + loteId + '"][data-inmueble-id="' + inmuebleId + '"]').each(function () {
                    var tipoItem = $(this).find('.tipo-item').val();

                    // Obtener estado de supervisor editable
                    var estadoSupervisorTrue = $(this).find('.column-supv input[type="radio"][value="True"]').is(':checked');

                    // Obtener estado de supervisor deshabilitado
                    var estadoSupervisorDisabled = $(this).find('.column-supv-disabled input[type="radio"][value="True"]').is(':disabled');

                    // Si es un tipo_item "False", verificar si está aprobado o no (true o deshabilitado)
                    if (tipoItem === "False") {
                        // Si no está aprobado ni desde la base de datos (disabled) ni en la vista
                        if (!estadoSupervisorTrue && !estadoSupervisorDisabled) {
                            todosTipoItemFalseTrue = false;
                            return false; // Salir del loop si encontramos un estado que no es true
                        }
                    }
                });

                // Buscar el detalle-cartilla que tiene tipo_item = true y habilitarlo/deshabilitarlo según la verificación
                $('.detalle-cartilla[data-cartilla-id="' + cartillaId + '"][data-lote-id="' + loteId + '"][data-inmueble-id="' + inmuebleId + '"]').each(function () {
                    var tipoItem = $(this).find('.tipo-item').val();
                    if (tipoItem === "True") {
                        var $radioTrue = $(this).find('.column-supv input[type="radio"][value="True"]');

                        // Deshabilitar si no todos los tipo_item = false están aprobados
                        $radioTrue.prop('disabled', !todosTipoItemFalseTrue);
                        if (todosTipoItemFalseTrue) {
                            $radioTrue.prop('checked', true);
                        } else {
                            $radioTrue.prop('checked', false);
                        }
                    }
                });
            }

            // Llamar a la función al cargar la página y al cambiar los filtros
            verificarEstadoSupervisor();

            // Manejar el cambio en el filtro de lote
            $('#lote_id').change(function () {
                // Desmarcar el checkbox selectAllSUPV cada vez que se cambie un filtro
                $('#selectAllSUPV').prop('checked', false);

                // Llamar a verificarEstadoSupervisor directamente sin delay
                verificarEstadoSupervisor();
            });

            // Manejar el cambio en el filtro de inmueble
            $('#inmueble_id').change(function () {
                // Desmarcar el checkbox selectAllSUPV cada vez que se cambie un filtro
                $('#selectAllSUPV').prop('checked', false);

                // Llamar a verificarEstadoSupervisor directamente
                verificarEstadoSupervisor();
            });

            // Manejar el cambio en los radio buttons de estado_supv
            $('#detalleTable').on('change', '.column-supv input[type="radio"]', function () {
                verificarEstadoSupervisor();
            });

            // Script para el checkbox selectAllSUPV
            $('#selectAllSUPV').change(function () {
                var isChecked = $(this).prop('checked');

                // Obtener los radio buttons de la columna VB SUPV que están visibles
                var $visibleRadios = $('td.column-supv:visible');

                // Establecer el estado de los radio buttons visibles según el estado del checkbox selectAllSUPV
                $visibleRadios.each(function () {
                    var detalleCartilla = $(this).closest('.detalle-cartilla');
                    var tipoItem = detalleCartilla.find('.tipo-item').val();
                    if (isChecked && tipoItem !== "True") {
                        // Si el checkbox está marcado y tipo_item no es true, establecer estado_supv a true
                        $(this).find('input[type="radio"][value="True"]').prop('checked', true);
                    } else {
                        // Si el checkbox no está marcado o tipo_item es true, establecer estado_supv a null
                        $(this).find('input[type="radio"][value="True"]').prop('checked', false);
                        $(this).find('input[type="radio"][value="False"]').prop('checked', false);
                    }
                });

                // Verificar el estado de supervisor después de actualizar los radio buttons
                verificarEstadoSupervisor();
            });
        });

    </script>
    <script>
// Script para manejar la expiración de la sesión
setTimeout(function () {
    window.location.href = '@Url.Action("Login", "Account")';
}, 43200000); // 12 horas en milisegundos
    </script>
}
else
{
    <link rel="stylesheet" href="~/Content/css/AccesoDenegado.css">
    <div id="header">
        <h1> Acceso denegado. Esta vista solo está disponible para perfil Supervisor</h1>
        <br />
        <a href="@Url.Action("Login", "Account")" class="btn-acceso">Iniciar Sesión</a>
    </div>
}
