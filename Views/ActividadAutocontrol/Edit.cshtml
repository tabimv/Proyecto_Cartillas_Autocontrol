@model Proyecto_Cartilla_Autocontrol.Models.ACTIVIDAD

@{
    ViewBag.Title = "Create";
}

@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Autocontrol")
{
    Layout = "~/Views/Shared/_Layout_Autocontrol.cshtml";
}
else
{
    Layout = "~/Views/Shared/_LayoutGeneral.cshtml";
}

@if (Session["Perfil"] != null && Session["Perfil"].ToString() == "Autocontrol")
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/css/CRUD_create_edit.css">

    using (Html.BeginForm())
    {

        @Html.AntiForgeryToken()
        <div class="container-formularios">
            <div class="form-container">
                <h2>Editar Actividad</h2>
                <form>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.actividad_id)


                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @TempData["ErrorMessage"]
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.OBRA_obra_id, "Obra Asociada: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(model => model.OBRA_obra_id, ViewBag.ObrasAsociadas as SelectList, "Selecciona una obra", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OBRA_obra_id, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.codigo_actividad, "Codigo Actividad: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.codigo_actividad, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.codigo_actividad, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.nombre_actividad, "Nombre Actividad: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.nombre_actividad, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nombre_actividad, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.estado, "Estado: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(model => model.estado, new List<SelectListItem>
                        {
                            new SelectListItem { Text = "Activo", Value = "A" },
                            new SelectListItem { Text = "Bloqueado", Value = "B" }
                        }, "Selecciona un estado", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.estado, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.tipo_actividad, "Tipo Actividad: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(model => model.tipo_actividad, new List<SelectListItem>
                        {
                            new SelectListItem { Text = "Inmueble", Value = "I" },
                            new SelectListItem { Text = "Proyecto", Value = "P" }
                        }, "Selecciona un tipo de actividad", new { @class = "form-control", required = "required", title = "Por favor, seleccione un tipo de actividad" })
                        @Html.ValidationMessageFor(model => model.tipo_actividad, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.notas, "Notas: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.TextAreaFor(model => model.notas, new { @class = "form-control", rows = "3" }) <!-- Ajusta el número de filas según lo necesites -->
                        @Html.ValidationMessageFor(model => model.notas, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <input type="submit" value="Guardar Cambios" class="btn btn-primary-custom" />
                    </div>
                    <div>
                        <a href="@Url.Action("Index")" class="btn-custom">Volver a la lista</a>
                    </div>
                </form>
            </div>
        </div>
    }

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
     $(document).ready(function () {
         $('form').submit(function (event) {
             var estado = $('#estado').val(); // Obtener el valor del estado seleccionado
             if (estado === "B") {
                 var cartillaRelacionada = '@(ViewBag.CartillaRelacionada)';
                 var estadoFinalCartilla = '@(ViewBag.EstadoFinalCartilla)';
                 if (cartillaRelacionada === "True" && (estadoFinalCartilla === "En proceso" || estadoFinalCartilla === "Rechazada")) {
                     alert("El estado de la actividad no puede ser Bloqueado porque la cartilla relacionada no está Aprobada.");
                     event.preventDefault(); // Detener el envío del formulario
                 }
                 if (cartillaRelacionada === "False" && (estadoFinalCartilla === "En proceso" || estadoFinalCartilla === "Rechazada" || estadoFinalCartilla === "Aprobada")) {
                     alert("El estado de la actividad no puede ser Bloqueado porque la actividad no tiene Cartilla relacionada.");
                     event.preventDefault(); // Detener el envío del formulario
                 }
             }
              if (estado === "A") {
              var cartillaRelacionada = '@(ViewBag.CartillaRelacionada)';
              var estadoFinalCartilla = '@(ViewBag.EstadoFinalCartilla)';
                  if (cartillaRelacionada === "True" && (estadoFinalCartilla === "Aprobada")) {
                  alert("El estado de la actividad no puede ser Activo porque la cartilla relacionada está Aprobada.");
                  event.preventDefault(); // Detener el envío del formulario
              }

          }
         });
     });
    </script>
    <script>
 $(document).ready(function () {
     // Obtener el ID de la obra asociada a la actividad
     var selectedObraId = '@Model.OBRA_obra_id';

     // Establecer la opción seleccionada en el DropDownList
     $('#obraDropdown').val(selectedObraId);
 });
    </script>
    <script>
// Script para manejar la expiración de la sesión
setTimeout(function () {
    window.location.href = '@Url.Action("Login", "Account")';
}, 43200000); // 12 horas en milisegundos
    </script>
}
else
{
    <link rel="stylesheet" href="~/Content/css/AccesoDenegado.css">
    <div id="header">
        <h1> Acceso denegado. Esta vista solo está disponible para Autocontrol</h1>
        <br />
        <a href="@Url.Action("Login", "Account")" class="btn-acceso">Iniciar Sesión</a>
    </div>
}


